.bd B 3
.TH lnk55 1 "Mar 02, 2012" "TI Tools" "TI Code Generation Tools"
.SH NAME
lnk55 - ELF Linker
.SH SYNOPSIS
.B lnk55
[
.I options
] [
.I file(s)
]
.SH DESCRIPTION
The ELF Linker creates executable modules by combining ELF object files.  For more information on using the linker, see the 
.B Assembly Language Tools User's Guide

.SH OPTIONS
The following options are accepted by this tool:
.SS Basic Options:
.SS
.TP
--heap=size
Specify the maximum heap size for C/C++ dynamic memory allocation. [Same as -heap]
.TP
-heap=size
Specify the maximum heap size for C/C++ dynamic memory allocation. [Same as --heap]
.TP
-m=file
Produce a listing of all input and output sections into <file>.
.TP
-o=file
Full filename of the output file.
.TP
--stack=size
Set C system stack size [Same as -stack]
.TP
-stack=size
Set C system stack size [Same as --stack]
.SS File Search Path Options:
.SS
.TP
--disable_auto_rts
Disable automatic RTS selection
.TP
-i=dir
Alter the library-search algorithm to look in dir before looking in the default location.  This option must appear before the -l option.
.TP
-l=file
Include library file or command file as input
.TP
-priority
Search libraries in priority order
.TP
-x
Reread libraries; resolve backward references
.SS Command File Preprocessing Options:
.SS
.TP
--define=name=value
Pre-define preprocessor macro _name_ to _value_
.TP
--disable_pp
This disables preprocessing of linker command files.
.TP
--undefine=name
Undefine preprocessor macro _name_
.SS Diagnostics Options:
.SS
.TP
--diag_error=id
Treat diagnostic <id> as error
.TP
--diag_remark=id
Treat diagnostic <id> as remark
.TP
--diag_suppress=id
Suppress diagnostic <id>
.TP
--diag_warning=id
Treat diagnostic <id> as warning
.TP
--display_error_number
Emit diagnostic identifier numbers
.TP
--issue_remarks
Issue remarks
.TP
--no_demangle
Don't demangle symbol names in diagnostics
.TP
--no_warnings
Suppress warnings
.TP
-pdew
Treat warnings as errors
.TP
--set_error_limit=count
Set error limit to <count>
.TP
--verbose_diagnostics
Verbose diagnostics
.TP
-w
Warn if an unspecified output section is created
.SS Linker Output Options:
.SS
.TP
-a
Produce absolute executable object file (default)
.TP
-abs
Produce absolute listing file
.TP
--mapfile_contents=attribute
Enable the display of <attribute> or disable with no<attribute> in the linker generated map file.  Multiple attributes can be specified by separating them with commas (e.g. --mapfile_contents=sections,nosymbols).  Type --mapfile_contents=help for a list of attributes.
.TP
-r
Produce a relocatable output module
.TP
--rom
This option allows the creation of ROM object module
.TP
-xml_link_info=file
Produce a detailed link information data-base into the file named <file>.
.SS Symbol Management Options:
.SS
.TP
-b
Disable type merging in symbolic debugging information.
.TP
-e=symbol
Specify program entry point for the output module
.TP
-g=symbol
Don't make global symbol static if -h is specified
.TP
--globalize=pattern
The option '--localize=l_pattern' makes the symbols matching the l_pattern hidden. The '--globalilze=g_pattern' option excludes symbols matching g_pattern from symbol localization provided g_pattern is more restrictive than l_pattern. 
.TP
-h
Make all global symbols static
.TP
--hide=pattern
Hide the symbols matching the pattern by changing the name to empty string
.TP
--localize=pattern
Given a symbol name pattern, make all the symbols matching this pattern local
.TP
-s
Strip symbol table and line number entries
.TP
-scanlibs
Check whether symbol definitions that are pulled into the link are duplicated in any of the libraries included in the build.  This information is typically ignored as the linker will pull in the first definition it encounters.
.TP
--symbol_map=refname=defname
Symbol mapping allows a symbol reference to be resolved by a symbol with different name. Symbol mapping allows functions to be overridden with alternate definitions. This feature can be used to patch in alternate implementations, which provide patches (bug fixes) or alternate functionality. For example, the option --symbol_map='foo=foo_patch' makes the linker resolve any references to foo by the definition foo_patch.
.TP
-u=sym
Add <sym> to symbol table as an unresolved symbol
.TP
--unhide=pattern
The option --hide=hide_pattern makes the symbols matching the hide_pattern hidden. The --unhide=unhide_pattern option excludes symbols matching unhide_pattern from symbol hiding provided unhide_pattern is more restrictive than hide_pattern. 
.SS Runtime Environment Options:
.SS
.TP
--args=size
Set C argc/argv memory size
.TP
--byte_with_word_mode
Allow word mode code in byte mode executable
.TP
-c
Link using ROM autoinitialization model
.TP
-cr
Link using RAM autoinitialization model
.TP
-f=value
Set the default fill value for filling holes in output sections.
.TP
-sysstack=size
Specify size of output sysstack section
.SS Miscellaneous Options:
.SS
.TP
-help
Display usage information.  Followed by another option, will display detailed information on that option. [Same as --help]
.TP
--help
Display usage information.  Followed by another option, will display detailed information on that option. [Same as -help]
.TP
-j
Disable conditional linking; ignore all .clink directives.
.TP
--preferred_order=function
Insert a function into the preferred function order list for placement.  Functions that are close to each other in the preferred function order list will tend to be placed close together (increase program locality between them).  Static functions of the same name can be distinguished from each other by prefixing the function name with the path and file in which the function is defined followed by a ':' character to delimit the beginning of the function name.
.TP
--strict_compatibility[=on,off]
Strict compatibility checking The argument to the option is optional, and if not specified it will default to: on
.SH EXIT STATUS
The following error values are returned:
.PD 0
.TP 10
.B 0
Successful completion.
.TP
.B >0
Unsuccessful completion; an error occured.
.PD
.SH COPYRIGHT
.TP
Copyright (c) 2012, Texas Instruments, Inc.
