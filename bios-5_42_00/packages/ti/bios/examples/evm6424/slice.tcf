/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== slice.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.evm6424");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Enable heaps in IRAM and define label SEG0 for heap usage.
 */

 
bios.IRAM.createHeap      = true;
bios.IRAM.enableHeapLabel = true;
bios.IRAM["heapLabel"]    = prog.extern("SEG0");
bios.IRAM.heapSize        = 0x2000;
bios.MEM.BIOSOBJSEG = prog.get("IRAM");
bios.MEM.MALLOCSEG = prog.get("IRAM");

/*
 *  The following statements will enable the MAR bits for MAR 128 to MAR 143. 
 *  This will make the external memory range (0x80000000-0x8FFFFFFF) cacheable.
 */

bios.GBL.C64PLUSCONFIGURE = 1;
bios.GBL.C64PLUSMAR128to159 = 0x0000ffff;


/*
 *  When using the ARM with DSP, the ARM will share Timer 1 with the DSP.
 *  The ARM needs to enable power to Timer 1, program the timer for "32-bit unchainded" mode
 *  and take it out of reset.  The BIOS CLK should be driven with Timer 1 and not reset
 *  the timer.
 *
 *  In most production ARM+DSP systems we recommend removing these 2
 *  lines and sharing Timer1 with the Arm.  This will free up Timer0 for use by the
 *  application.
 *
 *  The workaround below is used to make the DSP-side applications work "out of the box"
 *  without any need for coordination with the ARM OS.
 */

bios.CLK.TIMERSELECT = "Timer 0";      /* Select Timer 0 to drive BIOS CLK */
bios.CLK.RESETTIMER = true;          /* Take the selected timer our of reset */
/* Increase the buffer size of the LOG_system LOG object */

bios.LOG_system.bufLen = 2048;
bios.LOG_system.logType = "circular";

/* Create a trace LOG object for printing basic program output.  */

var trace = bios.LOG.create("trace");
trace.bufLen = 1024;
trace.logType = "circular";

/* Create a PRD object to cause tasks to yield periodically */

var prd0 = bios.PRD.create("prd0");
prd0.period = 1;
prd0.mode = "continuous";
prd0["fxn"] = prog.extern("prdfxn0");

/* Create a PRD object to post a semaphore periodically */

var prd1 = bios.PRD.create("prd1");
prd1.period = 16;
prd1.mode = "continuous";
prd1["fxn"] = prog.extern("prdfxn1");

/* Create a semaphore for code synchronization */

var sem = bios.SEM.create("sem");
sem.count = 0;

/* Create three TSKs of equal priority and one TSK with higher priority */

var TSK1 = bios.TSK.create("TSK1");
TSK1["fxn"] = prog.extern("task");
TSK1.priority = 1;
TSK1.arg0 = 1;

var TSK2 = bios.TSK.create("TSK2");
TSK2["fxn"] = prog.extern("task");
TSK2.priority = 1;
TSK2.arg0 = 2;

var TSK3 = bios.TSK.create("TSK3");
TSK3["fxn"] = prog.extern("task");
TSK3.priority = 1;
TSK3.arg0 = 3;

var TSK4 = bios.TSK.create("TSK4");
TSK4["fxn"] = prog.extern("hi_pri_task");
TSK4.priority = 2;
TSK4.arg0 = 4;
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
