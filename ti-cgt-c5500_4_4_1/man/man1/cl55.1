.bd B 3
.TH cl55 1 "Mar 02, 2012" "TI Tools" "TI Code Generation Tools"
.SH NAME
cl55 - Compiler
.SH SYNOPSIS
.B cl55
[
.I options
] [
.I file(s)
]
.SH DESCRIPTION
The compiler is an optimizing C/C++ compiler that accepts C++ as well as American National Standards Institute (ANSI) standard C source code and produces target specific object code.  This compiler builds object code directly from your C++ program source.  There is no intermediate C version of the program.

The 
.B Optimizing C Compiler User's Guide
discusses the characteristics and limitations of this C/C++ compiler, as well as the languages, features and keywords supported.
.SH OPTIONS
The following options are accepted by this tool:
.SS Processor Options:
.SS
.TP
--memory_model=small,large,huge
Specify memory model (small/large/huge)
.TP
-v=dev[:rev]
Specify the device (and optionally the revision) of the target silicon device to generate code optimized for the revision and to work around issues raised by Silicon Advisories for the revision.  Can be specified multiple times to support multiple silicon versions.  An argument of 'list' will display the list of recognized arguments
.SS Optimization Options:
.SS
.TP
-O[=0-3]
Set compiler optimization level.

Level 0 includes register optimizations.  Level 1 adds local optimizations. Level 2 further adds global optimizations. Level 3 further adds interprocedure optimizations.

Using -O without arguments defaults to -O2. The argument to the option is optional, and if not specified it will default to: 2
.SS Debug Options:
.SS
.TP
-g
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -gw]
.TP
-gp
Adds the necessary debug directives to the object file which are needed by the profiler to allow function level profiling with minimal impact on optimization (if optimization is enabled). Using -g may hinder some optimizations to ensure that debugability is maintained, while this option will not hinder optimization.

You will still be able to set breakpoints and profile on function-level boundaries, but you will not be able to single-step through code as with full debug ability.
.TP
-gt
Enable full symbolic COFF debugging in the generated object or out file (DEPRECATED).
.TP
-gw
Enable full symbolic DWARF debugging in the generated object or out file. [Same as -g]
.TP
-mn
Optimize fully in the presence of debug directives
.TP
--symdebug:none
Disable debug and suppress all symbolic debug information from being included in the generated object or out file.
.TP
--symdebug:skeletal
Enable symbolic debug information for program analysis. (default)
.SS Include Options:
.SS
.TP
-I=dir
Add the specified dir(ectory) to the #include file search path list.
.TP
--preinclude=filename
Include the source code of the indicated file at the beginning of the compilation. This can be used to establish standard macro definitions, etc. The file name is searched for in the directories on the include search list. The files are processed in the order in which they were specified.
.SS Control Options:
.SS
.TP
-c
Disable linking, overriding -z (if used).
.TP
-h
Show usage information.  When followed by another option or a phrase display that option's detailed information, or search for options related to that phrase.
.TP
-n
Compile only; do not assemble
.TP
-z[=arguments]
After compiling all the source files, perform a link and pass all the options following this option to the linker.
.SS Advanced Debug Options:
.SS
.TP
--symdebug:keep_all_types
Keep referenced type info (default for elf w/ debug)
.SS Language Options:
.SS
.TP
--exceptions
Enable C++ exception handling
.TP
-fg
Treat C files as C++ files
.TP
--gcc
This option enables the support for GCC extensions.  This feature is incompatible with strict ANSI mode.
.TP
--keep_unneeded_statics
The parser, by default, will remark about and then remove any unreferenced static variables.  This option will keep the parser from deleting unreferenced static variables and any static functions that are, in turn referenced by these variables.
.TP
-pc
Enable multibyte character support in the parser.
.TP
-pe
Enable support for embedded C++
.TP
-pi
Ignore the inline keyword while parsing.
.TP
-pk
Enable K & R C compatibility.
.TP
-pl
Output raw listing to .rl file
.TP
-pm
Enable program mode compilation.
.TP
-pn
Disable intrinsic functions in the parser.
.TP
-pr
Enable relaxed ANSI source parsing mode.
.TP
-ps
Enable strict ANSI source parsing mode.  Any source violating strict ANSI guidelines will generate a parsing error.
.TP
-px
Output xref listing to .crl file
.TP
-rtti
Support C++ run-time type information
.TP
--static_template_instantiation
All template entities are instantiated as needed in the file.  The instantiations are given internal (static) linkage.
.SS Parser Preprocessing Options:
.SS
.TP
-ppa
This option instructs the compiler to additionally continue compilation of the source file (rather than exiting) after generating a pre-processing .pp output file such as those generated by -ppd (dependencies) -ppi (included files), or -ppm (macros).
.TP
-ppc
Only preprocess the source file(s) and then stop; maintain source comments in the output.
.TP
-ppd[=filename]
Generate a dependency list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include all files included in the source file as well as any of the files included.  Also see the -ppa option to continue compilation after generating the dependency list (similar to gcc).
.TP
-ppi[=filename]
Generate an include list for the source file into the file <filename>.pp and then exit.  Optionally, name the output file.  The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the include list (similar to gcc).
.TP
-ppl
Only preprocess the source file(s) and then stop; maintain #line directives in the output..
.TP
-ppm[=filename]
Generate a list of predefined and user defined macros for the source file into the file <filename>.pp and then exit.  Optionally, name the output file. The output will include only those files directly included by the source file.   Also see the -ppa option to continue compilation after generating the macro list (similar to gcc).
.TP
-ppo
Only preprocess the source file(s) and then stop.
.SS Predefined Symbols Options:
.SS
.TP
-D=NAME[=value]
Pre-define a symbol with the id 'NAME', optionally setting it's contents to 'value'.
.TP
-U=NAME
Undefine the symbol with the id 'NAME'.
.SS Diagnostic Options:
.SS
.TP
-b
Generate auxiliary user information file.
.TP
--compiler_revision
Print out the compiler release revision and exit.
.TP
-pdel=count
Set error limit to <count>
.TP
-pden
Emit the diagnostic identifier numbers along with diagnostic messages.  These identifiers can be used with options such as -pds to suppress a specific diagnostic.
.TP
-pdew
Treat warnings as errors
.TP
-pdf
Write diagnostics to an .err file instead of the standard output.  The file name with be the same as the source file but with an .err extension.
.TP
-pdr
Issue remarks, which are normally suppressed.
.TP
-pds=id
Suppress diagnostic <id>
.TP
-pdse=id
Treat diagnostic <id> as error
.TP
-pdsr=id
Treat diagnostic <id> as remark
.TP
-pdsw=id
Treat diagnostic <id> as warning
.TP
-pdv
Enable verbose diagnostic information from the parser, including the source line of the error and an indicator of the error position within the line.
.TP
-pdw
Suppress all parser warnings.
.TP
-q
Suppress common compiler non-diagnostic output.  Remarks, errors and warnings will still be generated, as well as feature specific status.
.TP
-qq
Suppress all compiler non-diagnostic output.  Remarks, errors and warnings will still be generated.
.TP
--tool_versions
Print version numbers for each tool [Same as -version, -versions]
.TP
--verbose
Display progress information and toolset version when executing.
.TP
-version
Print version numbers for each tool [Same as -versions, --tool_versions]
.TP
-versions
Print version numbers for each tool [Same as -version, --tool_versions]
.SS Runtime Model Options:
.SS
.TP
--align_functions
Align functions to reduce fetch stalls
.TP
--asm_source=algebraic,mnemonic
Used by shell to explicitly select assembly source language When not specified by the user, the compiler defaults to mnemonic
.TP
-ata
Assert ARMS status bit initially set
.TP
-atb
Changes bus conflict errors to warnings
.TP
-atc
Assert CPL status bit initially set
.TP
-ath
Port for speed over size
.TP
-atl
Assert C54CM status bit is set
.TP
-atn
Remove NOP in delay slots
.TP
-att
Assert SST status bit is zero
.TP
-atv
All gotos/calls are encoded with 24-bit offset
.TP
--byte_mode
Activate byte mode (CHAR_BIT==8)
.TP
--fp_reassoc=on,off
Set to on to allow reassociation of floating point arithmetic even in cases where the reassociation will result in a slightly different answer. When not specified by the user, the compiler defaults to off
.TP
-gpp
Enable power profiling support by inserting NOPs into the frame code.  These NOPs can then be instrumented by the power profiling tooling to track power usage of functions.  If the power profiling tool is not used, this option will increase the cycle count of each function because of the NOPs.  This switch also disables optimizations that cannot be handled by the power-profiler.
.TP
-mb
Assume all BSS is on-chip
.TP
-mc
ROM allocatable constants
.TP
-mg
Codegen outputs algebraic assembly
.TP
-mo[=on,off]
Place each function in a separate subsection The argument to the option is optional, and if not specified it will default to: on
.TP
-mr
No block/local repeats
.TP
-mt
Assume no irregular alias or loop behavior
.TP
--nomacx
Don't expand assembly macros when outputting source
.TP
--no_byte_operands
Do not generate low_byte/high_byte operands
.TP
--predication_level=limit
Max length of instruction sequence to predicate
.TP
--ptrdiff_size=16,32
Specify type size to hold results of pointer math When not specified by the user, the compiler defaults to 32
.TP
--sat_reassoc=on,off
Set to on to allow reassociation of saturating arithmetic even in cases where the reassociation will cause saturation to occur differently. When not specified by the user, the compiler defaults to off
.TP
--small-enum
Enums may be char/short, instead of int
.TP
--translate_c54x_mnem_source
Allow C54x native mnemonic assembly source
.SS Advanced Optimizations Options:
.SS
.TP
-ma
Assume called funcs create hidden aliases (rare)
.TP
-mf[=0-5]
Optimize for speed The argument to the option is optional, and if not specified it will default to: 4
.TP
-ms[=0-3]
Optimize for code size The argument to the option is optional, and if not specified it will default to: 3
.TP
-oi[=size]
Specify threshold for automatic inlining
.TP
-on=0-2
Set the optimizer information file level, or disable with 0. Level 1 includes basic information.  Level 2 includes detailed information.  The file will be created in the assembly directory if a custom asm directory is specified on the command line otherwise it will be created in the object file directory.
.TP
-op=0-3
Specify assumptions to make about function calls when optimizing.

Level 0 (-op0) indicates that the module has functions that are called from other modules.

Level 1 (-op1) indicates that the module does not have functions that are called by other modules but has global variables that are modified in other modules.

Level 2 (-op2) indicates that the module does not have functions that are called or globals that are modified by other modules.

Level 3 (-op3) indicates that the module has functions that are called by other modules but does not have globals that are modified by other modules.
.TP
-os
Generate optimized source interlisted assembly
.TP
--remove_hooks_when_inlining
Remove the entry and exit hooks from the bodies of inlined functions.
.TP
--single_inline
Inline function that are called only once.  Will inline these functions even if auto inlining has been turned off (-oi0)
.SS Entry/Exit Hook Options:
.SS
.TP
--entry_hook[=hook_function_name]
Insert this call at entry to each function The argument to the option is optional, and if not specified it will default to: __entry_hook
.TP
--entry_parm=name,address,none
Pass caller's name or address to entry hook
.TP
--exit_hook[=hook_function_name]
Insert this call at exit from each function The argument to the option is optional, and if not specified it will default to: __exit_hook
.TP
--exit_parm=name,address,none
Pass caller's name or address to exit hook
.SS Library Function Assumptions Options:
.SS
.TP
-ol0
File redefines an RTS library function.
.TP
-ol1
File contains an RTS library function.
.TP
-ol2
File does not define any RTS library func (def.)
.TP
--printf_support=nofloat,minimal,full
Printf/sprintf functions use a common low level routine, _printfi which processes a given printf format string.  The full version of _printfi provides formatting capabilities that are not required in typical embedded applications. To address this the C runtime library also includes two limited of versions of _printfi that provide a useful subset of the formatting features specified by C library standard.

One version excludes support for printing floating values. All format specifiers except for %f, %g, %G, %e, or %E are supported. To specify this version use the option '--printf_support=nofloat' when linking.

The other version only supports printing of integer, char, or string values without width or precision flags.  Only %%, %d, %o, %c, %s and %x are supported.  To specify this version use the option '--printf_support=minimal' when linking.
.SS Assembler Options:
.SS
.TP
-aa
Generate absolute listing file
.TP
-ac
Symbol names are not case-significant
.TP
-ad=NAME[=value]
Pre-define the assembly symbol NAME, optionally setting its contents to 'value'.
.TP
-ahc=filename
Simulate source '.copy filename'
.TP
-ahi=filename
Simulate source '.include filename'
.TP
-al
Generate listing file
.TP
-apd[=filename]
Generate assembly dependency information.  Optionally, name the assembly dependency file.
.TP
-api
Generate first-level assembly include file list
.TP
-ar[=id]
Suppress identified assembler remark
.TP
-as
Keep local symbols in output file
.TP
-ats
Do not require '#' on shift counts (mnem only)
.TP
-atw
Suppress all assembler warnings
.TP
-au=NAME
Undefine assembly symbol NAME
.TP
-ax
Generate cross reference file
.TP
-k
Keep the generated assembly language (.asm) file
.TP
--no_const_clink
Do not generate .clink directives for const global arrays.  By default these arrays are placed in a .const subsection and conditionally linked.
.TP
-s
Generate interlisted assembly file
.TP
-ss
Generate C source interlisted assembly file
.SS File Type Specifier Options:
.SS
.TP
-fa=filename
File is an assembly file (default for .asm)
.TP
-fc=filename
File is a C file (default for .c/no ext)
.TP
-fo=filename
File is an object file (default for .obj)
.TP
-fp=filename
File is a C++ file (default for .C .cpp .cc)
.SS Directory Specifier Options:
.SS
.TP
-fb=dir
Absolute listing directory (default is .obj dir)
.TP
-fe=filename
Compilation output file name, can override --obj_directory
.TP
-ff=dir
Listing/xref file directory (default is .obj dir)
.TP
-fr=dir
Object file directory (default is .)
.TP
-fs=dir
Assembly file directory (default is .)
.TP
-ft=dir
Temporary file directory (default is .)
.TP
--pp_directory=dir
Place preprocessor output files in specified directory.  The directory must exist prior to compiler invocation.
.SS Default File Extensions Options:
.SS
.TP
-ea=.ext
Extension for assembly files (default is .asm)
.TP
-ec=.ext
Extension for C files (default is .c)
.TP
-eo=.ext
Extension for object files (default is .obj)
.TP
-ep=.ext
Extension for C++ files (default is .cpp)
.TP
-es=.ext
Extension for listing files (default is .lst)
.SS Command Files Options:
.SS
.TP
-@=filename
Read additional compile options the specified filename.
.SS MISRA-C:2004 Options:
.SS
.TP
--check_misra[=RULE]
Enable validation of MISRA-C:2004 rules. The argument to the option is optional, and if not specified it will default to: all
.TP
--misra_advisory=error,warning,remark,suppress
Set error category for MISRA advisory rules.
.TP
--misra_required=error,warning,remark,suppress
Set error category for MISRA required rules.
.SH EXIT STATUS
The following error values are returned:
.PD 0
.TP 10
.B 0
Successful completion.
.TP
.B >0
Unsuccessful completion; an error occured.
.PD
.SH COPYRIGHT
.TP
Copyright (c) 2012, Texas Instruments, Inc.
