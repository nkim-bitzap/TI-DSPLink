/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== mailbox.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.ezdsp28335");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Turn on heaps in L0SARAM and define label SEG0 for heap usage 
 * if this program has useMemSettings true.
 */
bios.L47SARAM.createHeap = true;
bios.L47SARAM.heapSize = 0x01f0;
bios.L47SARAM.enableHeapLabel = true;
bios.L47SARAM["heapLabel"] = prog.extern("SEG0");
bios.MEM.BIOSOBJSEG = prog.get("L47SARAM");
bios.MEM.MALLOCSEG = prog.get("L47SARAM");
bios.MEM.GBLINITSEG = prog.get("L47SARAM");
bios.MEM.TRCDATASEG = prog.get("L47SARAM");

/*
 * Enable heaps in external SRAM and define label SEG1 for heap usage.
 */

bios.SRAM.createHeap      = true;
bios.SRAM.enableHeapLabel = true;
bios.SRAM["heapLabel"]    = prog.extern("SEG1");
bios.SRAM.heapSize        = 0x4000;
bios.MEM.BIOSOBJSEG = prog.get("SRAM");
bios.MEM.MALLOCSEG = prog.get("SRAM");


/*
 * Create and initialize a LOG object
 */

var trace;
trace         = bios.LOG.create("trace");
trace.bufLen  = 256;
trace.logType = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

/*
 * Create and initialize four TSKs 
 */

var reader0;
reader0          = bios.TSK.create("reader0");
reader0.priority = 1;
reader0["fxn"]   = prog.extern("reader");

var writer0;
writer0          = bios.TSK.create("writer0");
writer0.priority = 1;
writer0["fxn"]   = prog.extern("writer");
writer0.arg0     = 0;

var writer1;
writer1          = bios.TSK.create("writer1");
writer1.priority = 1;
writer1["fxn"]   = prog.extern("writer");
writer1.arg0     = 1;

var writer2;
writer2          = bios.TSK.create("writer2");
writer2.priority = 1;
writer2["fxn"]   = prog.extern("writer");
writer2.arg0     = 2;

/*
 * Create a mbx
 */

var mbx;
mbx             = bios.MBX.create("mbx");
mbx.messageSize = 2;
mbx.length      = 2;
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
