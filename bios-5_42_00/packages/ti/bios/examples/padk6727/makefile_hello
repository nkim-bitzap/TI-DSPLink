#
#  *** Note: You must use gmake to build with this makefile ***
#
#  Makefile for creation of the program named by the PROG variable
#
#  The following naming conventions are used by this makefile:
#       hello.asm      - C62 assembly language source file
#       hello.obj      - C62 object file (compiled/assembled source)
#       hello.out      - C62 executable (fully linked program)
#       hellocfg.s62   - configuration assembly source file generated
#                         by Configuration Tool
#       hellocfg.h62   - configuration assembly header file generated
#                         by Configuration Tool
#       hellocfg_c.c   - configuration assembly header file generated
#                         by Configuration Tool
#       hellocfg.h     - configuration assembly header file generated
#                         by Configuration Tool
#       hellocfg.cmd   - configuration linker command file generated
#                         by Configuration Tool
#

PROG_NAME = hello

#specify command line options to be used when calling Tconf
TCONFOPTS=-Dconfig.importPath="$(PLATFORMS_ROOT)/packages;..;."

#  Flags - Specify platform specific compiler options here

CC6xFLAGS = -c  -mv67p --mem_model:data=far
AS6xFLAGS = -mv67p --mem_model:data=far
LD6xFLAGS = -m$(PROG_NAME).map

include ../config.mak
include ../c6xrules.mak

#  Every BIOS program must be linked with:
#       $(PROG)cfg.obj  - object resulting from assembling $(PROG)cfg.s62
#       $(PROG)cfg_c.obj- object resulting from compiling $(PROG)cfg_c.c
#       $(PROG)cfg.cmd  - linker command file generated by Config Tool. If
#                         additional liner command files exist, $(PROG)cfg.cmd
#                         must appear first.
#

PROG	= $(PROG_NAME)
OBJS	= $(PROG)cfg.obj $(PROG)cfg_c.obj 
CMDS	= $(PROG)cfg.cmd

#
#  Targets:
#
all: $(PROG).out

$(PROG).out: $(OBJS) $(CMDS)

.tconfdebug:
	$(TCONF) -g $(TCONFOPTS) $(PROG).tcf

.clean clean::
	@ echo removing generated configuration files ...
	@$(REMOVE) $(PROG)cfg.s62 $(PROG)cfg.h62 $(PROG)cfg.cmd
	@$(REMOVE) $(PROG)cfg_c.c $(PROG)cfg.h $(PROG).cdb
	@ echo removing object files and binaries ...
	@$(REMOVE) *.obj *.out *.lst *.map
