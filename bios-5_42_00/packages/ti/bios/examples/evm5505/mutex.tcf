/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== mutex.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.evm5505");

bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);
bios.enableTskManager(prog);

/*
 * Enable heaps in DARAM and define label SEG0 for heap usage.
 */

bios.DARAM.createHeap      = true;
bios.DARAM.enableHeapLabel = true;
bios.DARAM["heapLabel"]    = prog.extern("SEG0");
bios.DARAM.heapSize        = 0x500;
bios.MEM.BIOSOBJSEG = prog.get("DARAM");
bios.MEM.MALLOCSEG = prog.get("DARAM");


/*
 *  Define the GBL memory model 
 */

bios.GBL.MEMORYMODEL = "LARGE";
/* Increase the buffer size of the LOG_system LOG object */

bios.LOG_system.bufLen = 512;

/* Create a trace LOG object for printing basic program output.  */

var trace = bios.LOG.create("trace");
trace.bufLen = 256;
trace.logType = "circular";

/* Create a semaphore for code synchronization */
var sem = bios.SEM.create("sem");
sem.count = 1;

/* Create and initialize two TSK objects */

var mutexTsk1 = bios.TSK.create("task0");
mutexTsk1.priority = 1;
mutexTsk1["fxn"] = prog.extern("mutex1");

var mutexTsk2 = bios.TSK.create("task1");
mutexTsk2.priority = 2;
mutexTsk2["fxn"] = prog.extern("mutex2");
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
